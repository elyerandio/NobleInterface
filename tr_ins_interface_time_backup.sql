/*
Highlight and execute the following statement to drop the trigger
before executing the create statement.

DROP TRIGGER dbo.TR_INS_INTERFACE_TIME;

*/



-- ============================================================
--   Trigger: TRIGGER TR_INS_INTERFACE_TIME
--	Modified by Jack for TMS400220050601
--	Modified by Connie for TMS400320050901
-- ============================================================
CREATE TRIGGER [dbo].[TR_INS_INTERFACE_TIME]
ON [dbo].[INTERFACE_TIME]
AFTER INSERT
AS
DECLARE
  @M_ID NUMERIC(10),
  @M_DATE DATETIME,
  @M_TIME DATETIME,
  @S_PREV_ATTN_DATE_IND  VARCHAR(1),
  @S_ATTN_DATE_IND  VARCHAR(1),
  @M_PREVSCHEDULE_TYPE VARCHAR(4),
  @M_ATTENDANCE_ID NUMERIC(10),
  @M_PREVATTEND_ID NUMERIC(10),
  @M_WORKTYPE_REFERID NUMERIC(10),
  @M_USER VARCHAR(10),
  @M_AUDIT DATETIME,
  @M_SCHEDTYPE VARCHAR(4),
  @M_BADGENO VARCHAR(10),
  @M_ATTENDANCE DATETIME,
  @M_INOUT VARCHAR(1),
  @M_EMPNO VARCHAR(10),
  @M_WORKTYPE VARCHAR(4),
  @M_COUNTATTEND NUMERIC(3),
  @M_IN1 DATETIME,
  @M_IN2 DATETIME,
  @M_IN3 DATETIME,
  @M_IN4 DATETIME,
  @M_IN5 DATETIME,
  @M_OUT1 DATETIME,
  @M_OUT2 DATETIME,
  @M_OUT3 DATETIME,
  @M_OUT4 DATETIME,
  @M_OUT5 DATETIME,
  @M_PREVIN1 DATETIME,
  @M_PREVIN2 DATETIME,
  @M_PREVIN3 DATETIME,
  @M_PREVIN4 DATETIME,
  @M_PREVIN5 DATETIME,
  @M_PREVOUT1 DATETIME,
  @M_PREVOUT2 DATETIME,
  @M_PREVOUT3 DATETIME,
  @M_PREVOUT4 DATETIME,
  @M_PREVOUT5 DATETIME,
  @M_MCIN1 DATETIME,
  @M_MCIN2 DATETIME,
  @M_MCIN3 DATETIME,
  @M_MCIN4 DATETIME,
  @M_MCIN5 DATETIME,
  @M_MCOUT1 DATETIME,
  @M_MCOUT2 DATETIME,
  @M_MCOUT3 DATETIME,
  @M_MCOUT4 DATETIME,
  @M_MCOUT5 DATETIME,
  @M_COUNTSCHED NUMERIC(3),
  @M_SEQNO NUMERIC(2),
  @M_FOUND NUMERIC(10),
  @M_FOUNDSCHED NUMERIC(10),
  @M_SCHEDULE DATETIME,
  @M_WORKGROUP VARCHAR(4),
  @M_SHIFTFROM DATETIME,
  @M_SHIFTTO DATETIME,
  @M_SCHEDIN DATETIME,
  @M_SCHEDOUT DATETIME,
  @M_SHIFTID NUMERIC(10),
  @M_DEFAULTDATE DATETIME,
  @M_TRXDATE DATETIME,
  @M_AUTOCUTOFF NUMERIC(1),
  @M_CUTOFF_FR DATETIME,
  @M_CUTOFF_TO DATETIME,
  @M_CROSSOVER NUMERIC(1),
  @M_SHIFTS NUMERIC(1),
  @M_PREVIN DATETIME,
  @M_PREVOUT DATETIME,
  @M_AUTO_OUT NUMERIC(1),
  @M_OVERSHOOT NUMERIC(1),
  @M_PREVSCHEDTYPE VARCHAR(4),
  @M_PREVSHIFTFROM DATETIME,
  @M_PREVSHIFTTO DATETIME,
  @M_PREVAUTOCUTOFF NUMERIC(1),
  @M_NEXTSHIFTFROM DATETIME,
  @M_NEXTSHIFTTO DATETIME,
  @M_PREVWORKTYPE VARCHAR(4),
  @M_PREVCUTOFF_FR DATETIME,
  @M_PREVCUTOFF_TO DATETIME,
  @M_PREVCROSSOVER NUMERIC(1),
  @M_GOTATTENDANCE NUMERIC(1),
  @M_EARLYCLOCKIN_TIME DATETIME,
  @M_EARLYCLOCKIN NUMERIC(15,5),
  @M_NEXTSCHEDTYPE VARCHAR(4),
  @M_NEXTWORKTYPE VARCHAR(4),
  @M_DAYTYPE VARCHAR(1),
  @M_NEXTCROSSOVER NUMERIC(1),
  @M_TRXWITHIN NUMERIC(15,10),
  @M_SECONDSWITHIN NUMERIC(5),
  @M_COMPANY VARCHAR(4),
  @M_CLOCK DATETIME,
  @M_CHECK_PREVSHIFTTO DATETIME,
  @M_CHECK_TRXDATE DATETIME,
  @M_NEXTAUTOCUTOFF NUMERIC(1),
  @S_NEXT_ATTN_DATE_IND VARCHAR(1),
  @M_NEXTCUTOFF_FR DATETIME,
  @M_NEXTCUTOFF_TO DATETIME,
  @M_SHIFTTO1 DATETIME,
  @M_CUTOFF_TIME DATETIME,
  @M_CUTOFF_TYPE VARCHAR(1),
  @M_MID DATETIME,
  @M_HOUR_SHIFTFROM NUMERIC,
  @M_HOUR_DATE NUMERIC,
  @M_HOUR_SHIFTTO NUMERIC,
  @M_PREV_CUTOFF_TYPE VARCHAR(1),
  @M_PREV_CUTOFF_TIME DATETIME,
  @M_HOUR_CUTOFF NUMERIC,
  @M_SP_GETNEXTNUMBER VARCHAR(30),
  @M_SP_UPD_EMPLOYEE_ATTENDANCE VARCHAR(30),
  @P_ID NUMERIC (10),
  @P_SEQ_NO NUMERIC (2),
  @P_TIME_FROM DATETIME,
  @P_TIME_TO DATETIME,
  @P_CUTOFF_TIME DATETIME,
  @P_CUTOFF_TYPE VARCHAR(1),
  @M_TRXDATE_TIME DATETIME,
  @M_SHIFTTO_TIME DATETIME,
  @M_TIMEDIFF_IN NUMERIC(15,10),
  @M_TIMEDIFF_OUT NUMERIC(15,10),
  @M_SCHEDTYPE_ATTEND VARCHAR(4),
  @M_STATUS_OT VARCHAR(1),
  @M_STATUS_AT VARCHAR(1),
  --Added by Connie for new variables on 21/11/2007
  @M_HOLIDAYGROUP VARCHAR(4),
  @M_PREV_ISHOLIDAY NUMERIC(1, 0),
  @M_PREVHOL_CUTOFF DATETIME,
  @M_PREVHOL_CUTOFF_FLAG NUMERIC(1, 0),
  --Ended by Connie for new variables on 21/11/2007
  @M_WORKSECONDS NUMERIC(10),
		@M_OTSECONDS NUMERIC(10),
	  @M_BUFFER NUMERIC(10),
	  @M_TEMP_IN DATETIME,
	  @M_TEMP_OUT DATETIME,
	  @M_SECONDS NUMERIC(3),
	  @M_MINUTES NUMERIC(3),
	  @M_HOURS NUMERIC(3),
	  @M_TEMPHOUR VARCHAR(20),    
	  @M_WORKHOUR DATETIME,
	  @M_ELAPSED_IN NUMERIC(10),
	  @M_ELAPSED_OUT NUMERIC(10),
	  @M_TOTAL_OT DATETIME,
	  @M_GRACE_IN NUMERIC(10),
	  @M_GRACE_OUT NUMERIC(10),
	  @M_OTBEFORE NUMERIC(10),
	  @M_OTAFTER NUMERIC(10),
	  @M_OTNORMAL NUMERIC(10),
	  @M_TMP_ELAPSED_IN NUMERIC(10),
	  @M_TMP_ELAPSED_OUT NUMERIC(10),
	  @M_ISHOLIDAY NUMERIC(1),
	  @M_ABSENCE NUMERIC(3,2),
	  @M_MINHOURWORK DATETIME,
	  @M_SHIFTWORKHOUR DATETIME,
	  @M_SHIFTWORKTOTAL NUMERIC(10),
	  @M_ISBREAKTIME NUMERIC(1),
	  @M_ISREPLACEMENT NUMERIC(1),
	  @M_EMPID NUMERIC(10),
	  @M_WEEKDAY NUMERIC(1),
	  @M_CLOCK_IN_IND NUMERIC(1),
	  @M_COUNTBREAK NUMERIC(2),
	  @M_BREAK_TIME_FR DATETIME,
	  @M_BREAK_TIME_TO DATETIME,
	  @M_BREAK_TIME_PERIOD DATETIME,
	  @M_BREAK_TIME_FLAG NUMERIC(1),
	  @M_BREAKSECONDS NUMERIC(10),
	  @M_OTBREAKSECONDS NUMERIC(10),
	  @M_OT_START DATETIME,
	  @M_GOT_OTSTART NUMERIC(1),
	  @M_DEFAULT DATETIME,
	  @M_OTDEDUCTION NUMERIC(10),
	  @M_LEAVEDAYS NUMERIC(5,2),
	  @M_LATEIN NUMERIC(1),
	  @M_EARLYOUT NUMERIC(1),
	  @M_CUMM_LATEIN NUMERIC(10),
	  @M_CUMM_LATEOUT NUMERIC(10),
	  @M_CUMM_EARLYOUT NUMERIC(10),
	  @M_CUMM_EARLYIN NUMERIC(10),
	  @M_TMP_LATEIN NUMERIC(10),
	  @M_TMP_EARLYIN NUMERIC(10),
	  @M_TMP_LATEOUT NUMERIC(10),
	  @M_TMP_EARLYOUT NUMERIC(10),
	  @M_TOTAL_EARLYOUT NUMERIC(10),
	  @M_TOTAL_LATEOUT NUMERIC(10),
	  @M_TOTAL_LATEIN NUMERIC(10),
	  @M_TOTAL_EARLYIN NUMERIC(10),
	  @M_CNT NUMERIC(1),
	  @M_PERIOD_FR DATETIME,
	  @M_PERIOD_TO DATETIME,
	  @M_LAST_PERIOD DATETIME,
	  @M_LAST_BREAK_FR DATETIME,
	  @M_LAST_BREAK_TO DATETIME,
	  @M_LAST_PERIOD1 DATETIME,
	  @M_PRE_BREAK_FR DATETIME,
	  @M_PRE_BREAK_TO DATETIME,
	  @M_READ_IN NUMERIC(1),
	  @M_READ_OUT NUMERIC(1),
	  @M_PREV_READ_IN NUMERIC(1),
	  @DT_MINIMUM_WORK_HOUR_OT DATETIME,
	  @S_OT_CAL_METHOD VARCHAR(1),
	  @N_MINIMUM_WORK_OT_HOURS  NUMERIC(2),
	  @N_MINIMUM_WORK_OT_MINUTE NUMERIC(2),
	  @N_MINIMUM_WORK_OT_SECONDS NUMERIC(2),
	  @N_MINIMUM_WORK_OT_IN_SECONDS NUMERIC(10),
	  @M_PREV_DT_IN_TIME DATETIME,
	  @M_PREV_DT_OUT_TIME DATETIME,
	  @M_TOTAL_CNT NUMERIC(10),
	  @N_ENTRY_NO NUMERIC(3),
	  @DT_IN_TIME DATETIME,
	  @DT_OUT_TIME DATETIME,
	  @M_PREV_OUT DATETIME,
	  @M_NEXT_IN DATETIME,
	  @M_NEXT_OUT DATETIME,
	  @M_LOOP NUMERIC(1),
	  @N_SHIFT_FROM_HOURS NUMERIC(10),
	  @N_SHIFT_FROM_MINUTES NUMERIC(10),
	  @N_SHIFT_FROM_TOTAL NUMERIC(10),
	  @M_CUSTOMRESULT NUMERIC(1),
	  @M_SECONDSWORKDAY NUMERIC(6),
	  @M_SECONDSHOUR NUMERIC(6),
	  @M_SECONDSFULLDAY NUMERIC(6),
	  @M_BREAKSECONDS_SHIFT NUMERIC(6),
	  @M_WORKSECONDS_SHIFT NUMERIC(6),
	  @M_BREAK_CUTOFF_TYPE VARCHAR(1),
	  @M_FIRSTHALFSECONDS NUMERIC(6),
	  @M_SECONDHALFSECONDS NUMERIC(6),
	  @M_BREAKSHIFTCOUNT NUMERIC(1),

	  -- Added by Yik Jun on 12-May-2007
	  -- to handle 
	  -- (1)late in/early out with hourly leave,
	  -- (2) total work hours with hourly leave and
	  -- (3) breaktime late in/early out
	  @M_FIRSTBREAK_FR DATETIME,
	  @M_FIRSTBREAK_TO DATETIME,
	  @M_LEAVESECONDS NUMERIC(10,0),
	  @M_LEAVE_FR DATETIME,
	  @M_LEAVE_TO DATETIME,
	  @M_TOTALWORKSECONDS NUMERIC(10,0),
	  @M_TOTALWORKHOUR DATETIME,
	  @M_HR NUMERIC(3),
	  @M_MIN NUMERIC(3),
	  @M_SEC NUMERIC(3),
	  @M_TMPHOUR VARCHAR(20),
	  @M_ACTUAL_WORKHOURS DATETIME,
	  -- Ended by Yik Jun on 12-May-2007

	  -- Added by Yik Jun on 21-May-2007
	  @M_FIRSTIN DATETIME,
	  @M_LASTOUT DATETIME,
	  @M_LEAVE_FLAG VARCHAR(1),
	  -- Ended by Yik Jun on 21-May-2007

	  -- Added by Yik Jun on 05-June-2007
	  @M_TMP_OT	NUMERIC(10),
	  -- Ended by Yik Jun on 05-June-2007

	  -- Added by Yik Jun on 08-June-2007
	  @M_LEAVECOUNT NUMERIC(1),
	  -- Ended by Yik Jun on 08-June-2007
		
	  @M_EARLYCLOCKIN_6SS DATETIME,
	  @M_INOUT_6SS NUMERIC(10,0),
	  @M_TOTAL_BREAKTIME_6SS NUMERIC(10,0),
	  @M_BREAKFROM_6SS DATETIME,
      @M_BREAKTO_6SS DATETIME;

  SET @M_SP_GETNEXTNUMBER = 'SP_GETNEXTNUMBER'
  SET @M_SP_UPD_EMPLOYEE_ATTENDANCE = 'SP_UPD_EMPLOYEE_ATTENDANCE'
BEGIN
  SET @M_FOUND = NULL
  SET @M_SEQNO = 0
  SET @M_SHIFTID = NULL
  SET @M_CROSSOVER = 0
  SET @M_AUTOCUTOFF = 0
  SET @M_SHIFTS = 0
  SET @M_PREVOUT = NULL
  SET @M_PREVIN = NULL
  SET @M_AUTO_OUT = 0
  SET @M_OVERSHOOT = 0
  SET @M_PREVCROSSOVER = 0
  SET @M_GOTATTENDANCE = 1
  SET @M_PREVAUTOCUTOFF = NULL
  SET @M_PREVSCHEDTYPE = NULL
  SET @M_EARLYCLOCKIN = 0
  SET @M_SHIFTID = NULL
  SET @M_SCHEDTYPE = null
  SET @M_NEXTSCHEDTYPE = null
  SELECT @M_ID = INSERTED.ID,
         @M_BADGENO = INSERTED.BADGE_NO,
         @M_USER = INSERTED.CREATED_BY,
         @M_AUDIT = INSERTED.CREATED_DATE,
         @M_INOUT = INSERTED.INOUT_FLAG,
         @M_DATE = INSERTED.ATTENDANCE_DATE,
         @M_TIME = INSERTED.ATTENDANCE_TIME,
		 @M_TOTAL_BREAKTIME_6SS = INSERTED.DOC6SS_BREAKTIME,
		 @M_BREAKFROM_6SS = INSERTED.DOC6SS_BREAK_FROM,
		 @M_BREAKTO_6SS = INSERTED.DOC6SS_BREAK_TO
  FROM   INSERTED

  -- Added by Yik Jun on 14-NOV-2007
  -- To temporary workaround on MSSQL2005 issue that unable to pull all records, i m not sure what is
  -- actually happening, but after these statement is added, it work fine to pull all records.
  -- still need to monitor on this. This is work for Thailand customer - CORN, suspecting issue on
  -- MSSQL2005 allocating memory, but cant find actual solution/config, these statement may delay the
  -- process of the trigger, it may give time to reallocate memory. This section must remove if one day
  -- the actual solution is found.
  CREATE TABLE #TMP_DEBUG
  (
	ROW_NUM			NUMERIC(10,0)	IDENTITY,
	EMPLOYEE_NO		VARCHAR(10)	NULL
  )
  INSERT INTO #TMP_DEBUG
  ( EMPLOYEE_NO )
  VALUES
  ( @M_BADGENO )
  DELETE FROM #TMP_DEBUG
  -- Ended by Yik Jun on 14-NOV-2007
  
  SET @M_DEFAULTDATE = CONVERT(DATETIME,'2000-01-01 00:00:00',120)
  SET @M_TRXDATE = @M_TIME
  IF CONVERT(VARCHAR,@M_TIME,110) = '01-01-2000'
  BEGIN
    SET @M_TRXDATE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) + ' ' + CONVERT(VARCHAR,@M_TIME,114),120)
  END  
  --Modified by Connie on 21/11/2007 - to add holiday_group in the below select statement
  BEGIN
    SELECT @M_EMPNO = EMPLOYEE_NO, @M_WORKGROUP = WORK_GROUP_CODE,
           @M_COMPANY = COMPANY_CODE, @M_HOLIDAYGROUP = HOLIDAY_GROUP
    FROM  EMPLOYEE_BADGE
    WHERE  BADGE_NO = @M_BADGENO
    IF @@ROWCOUNT = 0
       RETURN
  END
  --Ended by Connie on 21/11/2007
  BEGIN
    SELECT @M_SECONDSWITHIN  = ISNULL(SECONDS_TRXWITHIN,0)
    FROM   GENERAL_SPECIFICATION
    WHERE  COMPANY_CODE = @M_COMPANY
    IF @@ROWCOUNT = 0
       RETURN
  END

  IF @M_SECONDSWITHIN > 0
     SET @M_SECONDSWITHIN = @M_SECONDSWITHIN + 1
  
  -- Express the seconds in terms of day.This is because the Date2 - Date1 is expressed in days.
  SET @M_TRXWITHIN = @M_SECONDSWITHIN / 86400
  -- There must be ONLY ONE schedule type in a day. However, just in case otherwise,we have to play safe.
  BEGIN 
    -- Modified: Joel@21Mar2007.
    --		Added control on NOT ALLOWING to update/modify record when OT or Attendance Status is APPROVED/'O'!!!
    --		If the user REALLY NEED to load again, the attendance and OT status MUST BE DISAPPROVED first.
    SELECT @M_SCHEDTYPE = SCHEDULE_TYPE,
	@M_STATUS_OT = OT_APP_STATUS,
	@M_STATUS_AT = POSTED_STATUS
    FROM   EMPLOYEE_ATTENDANCE
    WHERE  BADGE_NO = @M_BADGENO AND EMPLOYEE_NO = @M_EMPNO
	   AND SEQ_NO = 1
           AND CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_DATE,110)
    IF @@ROWCOUNT = 0
       SET @M_SCHEDTYPE = null
    ELSE
	IF @M_STATUS_OT = 'O' OR @M_STATUS_AT = 'O'
		-- IGNORE this clock-data!
		RETURN
  END
  IF @M_SCHEDTYPE IS NULL
  BEGIN
    SET @M_GOTATTENDANCE = 0
    -- FIND CORRESPONDING SCHEDULE FOR THIS DATE.
    SELECT  @M_SCHEDTYPE = MIN(SCHEDULE_TYPE)
    FROM    EMPLOYEE_SCHEDULE
    WHERE   BADGE_NO = @M_BADGENO AND EMPLOYEE_NO = @M_EMPNO AND
            CONVERT(VARCHAR,SCHEDULE_DATE,110) = CONVERT(VARCHAR,@M_DATE,110)
    IF @@ROWCOUNT = 0
       SET @M_SCHEDTYPE = null
  END
  SET @M_COUNTSCHED = 1
  IF @M_SCHEDTYPE IS NULL
  BEGIN
    SET @M_SCHEDTYPE = ''
    SET @M_COUNTSCHED = 0
  END
  IF @M_COUNTSCHED > 0
  BEGIN
    -- This section will identify exactly the schedule of the staff and at which shift (may have multiple workshifts in a worktype)
    -- this transaction should belong to,which is indicated by seq_no. Happening when there is a split-shift.
    SELECT @M_WORKTYPE =
           CASE DATEPART(DW,@M_DATE)
             WHEN 1 THEN WORK_TYPE_SUN
             WHEN 2 THEN WORK_TYPE_MON
             WHEN 3 THEN WORK_TYPE_TUE
             WHEN 4 THEN WORK_TYPE_WED
             WHEN 5 THEN WORK_TYPE_THU
             WHEN 6 THEN WORK_TYPE_FRI
           ELSE WORK_TYPE_SAT
           END
    FROM   WEEKLY_SCHEDULE
    WHERE  SCHEDULE_TYPE = @M_SCHEDTYPE
    IF @@ROWCOUNT = 0
       RETURN
    SELECT @M_WORKTYPE_REFERID = ID,
     	   @M_AUTOCUTOFF = ISNULL(AUTO_CUTOFF,0),
    	   @M_CUTOFF_FR = CUTOFF_FROM,
    	   @M_CUTOFF_TO = CUTOFF_TO,
           @S_ATTN_DATE_IND = ATTN_DATE_IND
    FROM WORK_TYPE_SETUP
    WHERE WORK_TYPE = @M_WORKTYPE
    IF @@ROWCOUNT = 0
       RETURN
    SET @M_CUTOFF_TO = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) +' ' + CONVERT(VARCHAR,@M_CUTOFF_TO,114),120)
    DECLARE
       CUR_SHIFT CURSOR FOR
       SELECT ID,SEQ_NO,TIME_FROM,TIME_TO, CUTOFF_TIME, CUTOFF_TYPE
       FROM   WORK_TYPE_SHIFT
       WHERE  REFER_ID = @M_WORKTYPE_REFERID
       ORDER BY  SEQ_NO ASC
    OPEN CUR_SHIFT
    FETCH NEXT FROM CUR_SHIFT
    INTO @P_ID, @P_SEQ_NO, @P_TIME_FROM, @P_TIME_TO, @P_CUTOFF_TIME, @P_CUTOFF_TYPE
    WHILE @@FETCH_STATUS = 0
    BEGIN
      SET @M_SHIFTID   = @P_ID
      SET @M_SEQNO     = @P_SEQ_NO
      SET @M_SHIFTFROM = @P_TIME_FROM
      SET @M_SHIFTTO   = @P_TIME_TO
      SET @M_CUTOFF_TIME = @P_CUTOFF_TIME
      SET @M_CUTOFF_TYPE = @P_CUTOFF_TYPE
      SET @M_SHIFTFROM = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) + ' ' + CONVERT(VARCHAR,@M_SHIFTFROM,114),120)
      SET @M_SHIFTTO = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) + ' ' + CONVERT(VARCHAR,@M_SHIFTTO,114),120)
      SET @M_MID = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) + ' ' + CONVERT(VARCHAR,'23:59:59',114),120)
      IF @M_SHIFTFROM > @M_SHIFTTO
      BEGIN
        SET @M_CROSSOVER = 1
        SET @M_HOUR_SHIFTFROM = CONVERT(NUMERIC(10),SUBSTRING(CONVERT(VARCHAR(8),@M_SHIFTFROM,108), 1,2))
        SET @M_HOUR_SHIFTTO = CONVERT(NUMERIC(10),SUBSTRING(CONVERT(VARCHAR(8),@M_SHIFTTO,108), 1,2))
        SET @M_HOUR_DATE = CONVERT(NUMERIC(10),SUBSTRING(CONVERT(VARCHAR(8),@M_TRXDATE,108), 1,2))
        SET @M_HOUR_CUTOFF = CONVERT(NUMERIC(10),SUBSTRING(CONVERT(VARCHAR(8),@M_HOUR_CUTOFF,108), 1,2))
        SET @M_TRXDATE_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DEFAULTDATE,110) + ' ' + CONVERT(VARCHAR,@M_TRXDATE,114),120)
        SET @M_SHIFTTO_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DEFAULTDATE,110) + ' ' + CONVERT(VARCHAR,@M_SHIFTTO,114),120)
        IF @M_HOUR_DATE < 12 AND @M_HOUR_SHIFTFROM >= 12
        BEGIN
          SET @M_SHIFTFROM = @M_SHIFTFROM - 1
          SET @M_MID = @M_SHIFTFROM + 1
        END
        ELSE
        IF @M_HOUR_SHIFTFROM < 12 AND @M_HOUR_SHIFTTO < 12 AND @M_HOUR_SHIFTFROM <> @M_HOUR_SHIFTTO
        BEGIN
          IF @M_HOUR_DATE < @M_HOUR_SHIFTFROM
          BEGIN
            IF @M_HOUR_DATE = @M_HOUR_SHIFTTO
            BEGIN
              IF @M_TRXDATE_TIME > @M_SHIFTTO_TIME
              BEGIN
                SET @M_SHIFTTO = @M_SHIFTTO + 1
              END
              ELSE
              BEGIN
                SET @M_SHIFTFROM = @M_SHIFTFROM - 1
              END
            END
            ELSE
            BEGIN
              SET @M_SHIFTFROM = @M_SHIFTFROM - 1
            END
          END
          ELSE
          BEGIN
            SET @M_SHIFTTO = @M_SHIFTTO + 1
          END
        END
        ELSE
        BEGIN
          SET @M_SHIFTTO = @M_SHIFTTO + 1
          IF @M_HOUR_DATE >= 12 AND @M_HOUR_SHIFTFROM >= 12
          BEGIN
            SET @M_HOUR_SHIFTFROM = @M_HOUR_SHIFTFROM - 4
            IF @M_TRXDATE < @M_SHIFTFROM AND @M_HOUR_DATE < @M_HOUR_SHIFTFROM
            BEGIN
              SET @M_SHIFTFROM = @M_SHIFTFROM - 1
              SET @M_SHIFTTO = @M_SHIFTTO - 1
            END
          END
          SET @M_MID = @M_SHIFTFROM - 1
        END
      END
      IF @M_CUTOFF_TIME IS NOT NULL
      BEGIN
        SET @M_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_TIME,114),120)
        IF @M_CUTOFF_TYPE = 'N'
        BEGIN
          SET @M_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTTO,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_TIME,114),120)
          IF @M_HOUR_DATE > 12 AND @M_HOUR_SHIFTFROM > 12 AND @M_HOUR_CUTOFF > 12
          BEGIN
            SET @M_HOUR_SHIFTFROM = CONVERT(NUMERIC(10),SUBSTRING(CONVERT(VARCHAR(8),@M_SHIFTFROM,108), 1,2))
            IF @M_HOUR_DATE < @M_HOUR_SHIFTFROM
            BEGIN
              SET @M_SHIFTFROM = @M_SHIFTFROM - 1
              SET @M_SHIFTTO = @M_SHIFTTO - 1
              SET @M_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTTO,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_TIME,114),120)
            END
          END
        END
        ELSE
        BEGIN
          SET @M_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_TIME,114),120)
        END
      END
      IF (@M_TRXDATE >= @M_SHIFTFROM AND @M_TRXDATE <= @M_SHIFTTO ) OR @M_TRXDATE < @M_SHIFTFROM
      BEGIN
        IF @M_CROSSOVER <> 1 AND @M_AUTOCUTOFF <> 1
        BEGIN
           -- THIS IS IT! This routine is to cater to SPLIT-SHIFT.
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          BREAK
        END
      END
      FETCH NEXT FROM CUR_SHIFT
    END
    CLOSE CUR_SHIFT
    DEALLOCATE CUR_SHIFT
    SET @M_SHIFTS = @@ROWCOUNT
    IF @M_SCHEDULE IS NULL AND @M_SHIFTS >= 1
    BEGIN
      -- The staff clock-in/out BEYOND the schedule. OVERSHOOT!!!
      SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      SET @M_OVERSHOOT = 1
    END
    IF @M_AUTOCUTOFF = 0 AND @M_CROSSOVER = 1
    BEGIN
      IF @M_SCHEDULE IS NULL
      BEGIN
        SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      END
    END
    IF CONVERT(VARCHAR,@M_TIME,110) = CONVERT(VARCHAR,@M_DEFAULTDATE,110)
    BEGIN
      SET @M_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE,110) + ' ' + CONVERT(VARCHAR,@M_TIME,114),120)
    END
    SELECT @M_PREVSCHEDTYPE = MIN(SCHEDULE_TYPE)
    FROM   EMPLOYEE_ATTENDANCE
    WHERE  CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE - 1,110) AND
           EMPLOYEE_NO = @M_EMPNO  AND BADGE_NO = @M_BADGENO
    IF @@ROWCOUNT = 0
       SET @M_PREVSCHEDTYPE = null
    IF @M_PREVSCHEDTYPE IS NULL
    BEGIN
      SELECT @M_PREVSCHEDTYPE = MIN(SCHEDULE_TYPE)
      FROM   EMPLOYEE_SCHEDULE
      WHERE  CONVERT(VARCHAR,SCHEDULE_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE - 1,110) AND
             EMPLOYEE_NO = @M_EMPNO  AND BADGE_NO = @M_BADGENO
      IF @@ROWCOUNT = 0
         SET @M_PREVSCHEDTYPE = null
    END
    IF @M_PREVSCHEDTYPE = @M_SCHEDTYPE
    BEGIN
      SET @M_PREVAUTOCUTOFF = @M_AUTOCUTOFF
      SET @M_PREVCUTOFF_FR = @M_CUTOFF_FR
      SET @M_PREVCUTOFF_TO = @M_CUTOFF_TO
    END
    IF @M_PREVSCHEDTYPE IS NOT NULL
    BEGIN
      SELECT @M_PREVWORKTYPE =
             CASE DATEPART(DW,@M_TRXDATE - 1)
               WHEN 1 THEN WORK_TYPE_SUN
               WHEN 2 THEN WORK_TYPE_MON
               WHEN 3 THEN WORK_TYPE_TUE
               WHEN 4 THEN WORK_TYPE_WED
               WHEN 5 THEN WORK_TYPE_THU
               WHEN 6 THEN WORK_TYPE_FRI
             ELSE WORK_TYPE_SAT
             END
      FROM   WEEKLY_SCHEDULE
      WHERE  SCHEDULE_TYPE = @M_PREVSCHEDTYPE
      IF @@ROWCOUNT = 0
         RETURN
      -- Modified by Connie on 21/11/2007 - to add holiday_cutoff_flag & holiday_cutoff in the below select statement
      BEGIN
        SELECT @M_PREVSHIFTFROM = B.TIME_FROM,
               @M_PREVSHIFTTO = B.TIME_TO,
               @M_PREVAUTOCUTOFF = ISNULL(A.AUTO_CUTOFF,0),
               @M_PREVCUTOFF_FR = A.CUTOFF_FROM,
               @M_PREVCUTOFF_TO = A.CUTOFF_TO,
               @S_PREV_ATTN_DATE_IND = A.ATTN_DATE_IND,
               @M_PREV_CUTOFF_TIME = B.CUTOFF_TIME, 
               @M_PREV_CUTOFF_TYPE = B.CUTOFF_TYPE,
               @M_PREVHOL_CUTOFF_FLAG = ISNULL(A.HOLIDAY_CUTOFF_FLAG,0),
               @M_PREVHOL_CUTOFF = A.HOLIDAY_CUTOFF_TIME
        FROM   WORK_TYPE_SETUP A, WORK_TYPE_SHIFT B
        WHERE  A.WORK_TYPE= @M_PREVWORKTYPE AND
               B.SEQ_NO= @M_SEQNO AND
               A.ID=B.REFER_ID
        IF @@ROWCOUNT =0
           RETURN
      END
      --Ended by Connie on 21/11/2007
      
      SET @M_PREVSHIFTFROM = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVSHIFTFROM,114),120)
      SET @M_PREVSHIFTTO   = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVSHIFTTO,114),120)
      IF @M_PREVSHIFTFROM > @M_PREVSHIFTTO
      BEGIN
        SET @M_PREVCROSSOVER = 1
        SET @M_PREVSHIFTTO = @M_PREVSHIFTTO + 1
      END
      ELSE
      BEGIN
        SET @M_PREVCROSSOVER = 0
      END
      IF @M_PREV_CUTOFF_TIME IS NOT NULL
      BEGIN
        IF @M_PREV_CUTOFF_TYPE = 'N'
        BEGIN
          IF @S_PREV_ATTN_DATE_IND = 'N'
          BEGIN
            SET @M_PREV_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_PREVSHIFTTO,110) + ' ' + CONVERT(VARCHAR,@M_PREV_CUTOFF_TIME,114),120)
          END
          ELSE
          BEGIN
            SET @M_PREV_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE,110) + ' ' + CONVERT(VARCHAR,@M_PREV_CUTOFF_TIME,114),120)
          END
        END
        ELSE
        BEGIN
          SET @M_PREV_CUTOFF_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREV_CUTOFF_TIME,114),120)
        END
      END
    END
    -- Added by Connie to check if hoilday on previous day on 21/11/2007.
    -- If previous day is holiday, system to follow holiday cutoff time instead of normal cutoff time.
    SELECT @M_PREV_ISHOLIDAY = COUNT(*)
    FROM HOLIDAY
    WHERE  GROUP_CODE = @M_HOLIDAYGROUP AND CONVERT(VARCHAR,HOLIDAY_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE - 1,110)

    IF @@ROWCOUNT = 0
       SET @M_PREV_ISHOLIDAY = 0

    IF @M_PREV_ISHOLIDAY = 1
    BEGIN
         IF @M_PREVHOL_CUTOFF_FLAG = 1
         BEGIN
              SET @M_PREVCUTOFF_FR = @M_PREVHOL_CUTOFF
              SET @M_PREVCUTOFF_TO = @M_PREVHOL_CUTOFF
              SET @M_CUTOFF_FR = @M_PREVHOL_CUTOFF
              SET @M_CUTOFF_TO = @M_PREVHOL_CUTOFF
         END
    END
    -- Ended by Connie to check if hoilday on previous day on 21/11/2007.

    SELECT @M_NEXTSCHEDTYPE = MIN(SCHEDULE_TYPE)
    FROM   EMPLOYEE_ATTENDANCE
    WHERE  BADGE_NO = @M_BADGENO AND EMPLOYEE_NO = @M_EMPNO AND
	CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE + 1,110)           
    IF @@ROWCOUNT = 0
       SET @M_NEXTSCHEDTYPE = null
    IF @M_NEXTSCHEDTYPE IS NULL
    BEGIN
      SELECT @M_NEXTSCHEDTYPE = MIN(SCHEDULE_TYPE)
      FROM   EMPLOYEE_SCHEDULE
      WHERE  CONVERT(VARCHAR,SCHEDULE_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE + 1,110) AND
             EMPLOYEE_NO = @M_EMPNO  AND BADGE_NO = @M_BADGENO
      IF @@ROWCOUNT = 0
         SET @M_NEXTSCHEDTYPE = null
    END
    IF @M_NEXTSCHEDTYPE IS NOT NULL
    BEGIN
      SELECT @M_NEXTWORKTYPE =
             CASE DATEPART(DW,@M_TRXDATE + 1)
               WHEN 1 THEN WORK_TYPE_SUN
               WHEN 2 THEN WORK_TYPE_MON
               WHEN 3 THEN WORK_TYPE_TUE
               WHEN 4 THEN WORK_TYPE_WED
               WHEN 5 THEN WORK_TYPE_THU
               WHEN 6 THEN WORK_TYPE_FRI
             ELSE WORK_TYPE_SAT
             END
      FROM   WEEKLY_SCHEDULE
      WHERE  SCHEDULE_TYPE = @M_NEXTSCHEDTYPE
      IF @@ROWCOUNT = 0
         RETURN
      SELECT @M_NEXTSHIFTFROM = B.TIME_FROM,
             @M_NEXTSHIFTTO = B.TIME_TO,
             @M_NEXTAUTOCUTOFF = ISNULL(A.AUTO_CUTOFF,0),
             @M_NEXTCUTOFF_FR = A.CUTOFF_FROM,
             @M_NEXTCUTOFF_TO = A.CUTOFF_TO,
             @S_NEXT_ATTN_DATE_IND = A.ATTN_DATE_IND
      FROM   WORK_TYPE_SETUP A, WORK_TYPE_SHIFT B
      WHERE  A.WORK_TYPE= @M_NEXTWORKTYPE AND
             B.SEQ_NO= @M_SEQNO AND
             A.ID=B.REFER_ID
      IF @@ROWCOUNT =0
         RETURN
      SET @M_NEXTSHIFTFROM = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,@M_NEXTSHIFTFROM,114),120)
      SET @M_NEXTSHIFTTO   = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,@M_NEXTSHIFTTO,114),120)
      SET @M_NEXTCUTOFF_FR = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,@M_NEXTCUTOFF_FR,114),120)
      IF @M_NEXTSHIFTFROM > @M_NEXTSHIFTTO
      BEGIN
        SET @M_NEXTCROSSOVER = 1
        IF @S_NEXT_ATTN_DATE_IND = 'N'
        BEGIN
          SET @M_NEXTSHIFTTO = @M_SHIFTTO + 1
        END
      END
      ELSE
      BEGIN
        SET @M_NEXTCROSSOVER = 0
      END
    END
  END
  IF @M_AUTOCUTOFF = 1 AND @M_CROSSOVER = 1
  BEGIN
    IF @S_ATTN_DATE_IND = 'N'
    BEGIN
      SET @M_CUTOFF_FR = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_FR,114),120)
      IF @M_TRXDATE > @M_CUTOFF_FR
      BEGIN
        SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      END
    END
    ELSE
    IF @S_ATTN_DATE_IND = 'C' AND @M_INOUT = 'O'
    BEGIN
      --Modified by Connie on 21/11/2007
      /*IF @M_TRXDATE >= @M_SHIFTFROM AND @M_TRXDATE <= @M_SHIFTTO
      BEGIN
        SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      END  */
      SET @M_CUTOFF_TO = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_TO,114),120)
      IF @M_AUTOCUTOFF = 1 AND @M_TRXDATE > @M_CUTOFF_TO
      BEGIN
        SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      END
      ELSE
      BEGIN
        SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      END
      --Ended by Connie on 21/11/2007
    END
  END
  ELSE
  IF @M_AUTOCUTOFF = 1 AND @M_CROSSOVER = 0
  BEGIN
    SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
  END
  IF @M_CROSSOVER = 0 AND @M_COUNTSCHED > 0
  BEGIN
    IF @M_CUTOFF_TIME IS NOT NULL
    BEGIN
      IF @M_TRXDATE > @M_CUTOFF_TIME
      BEGIN
        IF @M_CUTOFF_TYPE = 'N'
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
        ELSE
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
      END
    END
    IF @M_PREVSCHEDTYPE IS NOT NULL
    BEGIN
      IF @M_PREV_CUTOFF_TIME IS NOT NULL AND @M_PREVAUTOCUTOFF = 0
      BEGIN
        IF @M_TRXDATE <= @M_PREV_CUTOFF_TIME AND @M_PREV_CUTOFF_TYPE = 'N' AND @S_PREV_ATTN_DATE_IND = 'C'
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
      END
      ELSE
      BEGIN
        IF @M_PREVCROSSOVER = 1 AND @M_PREVAUTOCUTOFF = 0 AND @S_PREV_ATTN_DATE_IND = 'C'
        BEGIN
          SET @M_PREVSHIFTTO = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVSHIFTTO,114),120)
          SELECT @M_FOUND = ID ,
                 @M_IN1 = TIME_IN1,
                 @M_IN2 = TIME_IN2,
                 @M_IN3 = TIME_IN3,
                 @M_IN4 = TIME_IN4,
                 @M_IN5 = TIME_IN5,
                 @M_OUT1 = TIME_OUT1,
                 @M_OUT2 = TIME_OUT2,
                 @M_OUT3 = TIME_OUT3,
                 @M_OUT4 = TIME_OUT4,
                 @M_OUT5 = TIME_OUT5
          FROM   EMPLOYEE_ATTENDANCE
          WHERE  BADGE_NO = @M_BADGENO  AND EMPLOYEE_NO = @M_EMPNO AND
                 SEQ_NO = @M_SEQNO AND
                 CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE,110)
          IF @@ROWCOUNT = 0
             SET @M_FOUND = 0
          IF @M_FOUND = 0
          BEGIN
            IF @M_TRXDATE >= @M_PREVSHIFTFROM AND @M_TRXDATE <= @M_PREVSHIFTTO
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
            ELSE
            IF (@M_INOUT = 'O' AND @M_TRXDATE < @M_SHIFTFROM) OR @M_TRXDATE > @M_SHIFTTO
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
          END
          ELSE
          BEGIN
            SELECT @M_FOUND = ID ,
                   @M_IN1 = TIME_IN1,
                   @M_IN2 = TIME_IN2,
                   @M_IN3 = TIME_IN3,
                   @M_IN4 = TIME_IN4,
                   @M_IN5 = TIME_IN5,
                   @M_OUT1 = TIME_OUT1,
                   @M_OUT2 = TIME_OUT2,
                   @M_OUT3 = TIME_OUT3,
                   @M_OUT4 = TIME_OUT4,
                   @M_OUT5 = TIME_OUT5
            FROM   EMPLOYEE_ATTENDANCE
            WHERE  BADGE_NO = @M_BADGENO  AND EMPLOYEE_NO = @M_EMPNO AND
                   SEQ_NO = @M_SEQNO AND
                   CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE - 1,110)
            IF @@ROWCOUNT = 0
               SET @M_FOUND = 0
            IF @M_FOUND > 0 AND @M_INOUT = 'O'
            BEGIN
              IF @M_OUT1 = @M_TRXDATE OR @M_OUT2 = @M_TRXDATE OR @M_OUT3 = @M_TRXDATE OR @M_OUT4 = @M_TRXDATE OR @M_OUT5 = @M_TRXDATE
              BEGIN
                RETURN
              END 
            END
          END
        END
      END
    END
    IF @M_NEXTSCHEDTYPE IS NOT NULL AND @M_CUTOFF_TIME IS NULL AND @M_PREV_CUTOFF_TIME IS NULL
    BEGIN
      IF @M_CROSSOVER <> @M_NEXTCROSSOVER
      BEGIN
        IF @M_NEXTAUTOCUTOFF = 1 AND @S_NEXT_ATTN_DATE_IND = 'N'
        BEGIN
          IF @M_NEXTCUTOFF_FR < @M_TRXDATE AND @M_TRXDATE > @M_SHIFTTO
          BEGIN
            SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          END
        END
      END
      ELSE
      IF @M_NEXTCROSSOVER = @M_CROSSOVER
      BEGIN
        SELECT @M_FOUND = ID ,
               @M_IN1 = TIME_IN1,
               @M_IN2 = TIME_IN2,
               @M_IN3 = TIME_IN3,
               @M_IN4 = TIME_IN4,
               @M_IN5 = TIME_IN5,
               @M_OUT1 = TIME_OUT1,
               @M_OUT2 = TIME_OUT2,
               @M_OUT3 = TIME_OUT3,
               @M_OUT4 = TIME_OUT4,
               @M_OUT5 = TIME_OUT5
        FROM   EMPLOYEE_ATTENDANCE
        WHERE  BADGE_NO = @M_BADGENO  AND EMPLOYEE_NO = @M_EMPNO AND
               CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE ,110) AND
               SEQ_NO = @M_SEQNO
        IF @@ROWCOUNT = 0
           SET @M_FOUND = 0
        IF @M_FOUND = 0
        BEGIN
          IF @M_INOUT = 'I'
          BEGIN
            IF @M_TRXDATE < @M_NEXTSHIFTFROM AND @M_TRXDATE > @M_SHIFTTO AND @M_TRXDATE < @M_SHIFTFROM
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
          END
          ELSE
          BEGIN
            IF @M_TRXDATE >= @M_SHIFTFROM AND @M_TRXDATE <= @M_SHIFTTO
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
            ELSE
            IF @M_TRXDATE < @M_SHIFTFROM AND @M_PREVAUTOCUTOFF = 0	-- Modified by Connie on 21/11/2007 - time out not falls on correct attendance
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1 ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
            ELSE
            IF @M_TRXDATE <= @M_SHIFTTO
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
          END
        END
      END
    END
  END
  ELSE
  IF @M_COUNTSCHED > 0 AND @M_GOTATTENDANCE = 0 AND CONVERT(VARCHAR,@M_TIME,114) > CONVERT(VARCHAR,@M_SHIFTTO,114) AND @M_INOUT = 'I'
  BEGIN
    SELECT @M_NEXTSCHEDTYPE  = MIN(SCHEDULE_TYPE)
    FROM   EMPLOYEE_SCHEDULE
    WHERE  BADGE_NO = @M_BADGENO AND EMPLOYEE_NO = @M_EMPNO AND
           CONVERT(VARCHAR,SCHEDULE_DATE,110) = CONVERT(VARCHAR,@M_DATE + 1,110)
    IF @@ROWCOUNT = 0
       SET @M_NEXTSCHEDTYPE = null
    IF @M_NEXTSCHEDTYPE IS NOT NULL
    BEGIN
      SELECT @M_NEXTWORKTYPE =
             CASE DATEPART(DW, @M_DATE + 1)
               WHEN 1 THEN WORK_TYPE_SUN
               WHEN 2 THEN WORK_TYPE_MON
               WHEN 3 THEN WORK_TYPE_TUE
               WHEN 4 THEN WORK_TYPE_WED
               WHEN 5 THEN WORK_TYPE_THU
               WHEN 6 THEN WORK_TYPE_FRI
               ELSE WORK_TYPE_SAT
            END
      FROM  WEEKLY_SCHEDULE
      WHERE SCHEDULE_TYPE = @M_NEXTSCHEDTYPE
      IF @@ROWCOUNT = 0
         RETURN
      IF @M_NEXTWORKTYPE IS NOT NULL
      BEGIN
        SELECT @M_NEXTSHIFTFROM = B.TIME_FROM,
               @M_NEXTSHIFTTO = B.TIME_TO,
               @M_EARLYCLOCKIN_TIME = A.EARLY_CLOCKIN,
               @M_DAYTYPE = A.DAY_TYPE
        FROM   WORK_TYPE_SETUP A, WORK_TYPE_SHIFT B
        WHERE  A.WORK_TYPE = @M_NEXTWORKTYPE AND
               B.SEQ_NO = @M_SEQNO AND
               A.ID = B.REFER_ID
        IF @@ROWCOUNT = 0
           RETURN
        SET @M_NEXTSHIFTFROM = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,@M_NEXTSHIFTFROM,114),120)
        SET @M_NEXTSHIFTFROM = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1,110) + ' ' + CONVERT(VARCHAR,@M_NEXTSHIFTTO,114),120)
        IF CONVERT(VARCHAR,@M_NEXTSHIFTFROM,114) > CONVERT(VARCHAR,@M_NEXTSHIFTTO,114)
        BEGIN
          SET @M_NEXTCROSSOVER  = 1
        END
        ELSE
        BEGIN
          SET @M_NEXTCROSSOVER  = 0
        END
        IF @M_DAYTYPE = 'W' AND @M_NEXTCROSSOVER = 1
        BEGIN
          IF @M_EARLYCLOCKIN_TIME IS NOT NULL
          BEGIN
            IF CONVERT(VARCHAR,@M_EARLYCLOCKIN_TIME,110) <> CONVERT(VARCHAR,@M_DEFAULTDATE,110)
            BEGIN
              SET @M_EARLYCLOCKIN_TIME = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DEFAULTDATE,110) + ' ' + CONVERT(VARCHAR,@M_EARLYCLOCKIN_TIME,114),120)
            END
            SET @M_EARLYCLOCKIN = CONVERT(NUMERIC(15,5),(@M_EARLYCLOCKIN_TIME - @M_DEFAULTDATE)) * 24
          END
          IF @M_EARLYCLOCKIN > 0
          BEGIN
            IF CONVERT(VARCHAR,@M_TIME,110) >= CONVERT(VARCHAR,@M_EARLYCLOCKIN_TIME,110)
            BEGIN
              SET @M_SCHEDULE = @M_SCHEDULE + 1
            END
          END
        END
      END
    END
  END
  IF @M_PREVAUTOCUTOFF IS NULL
  BEGIN
    SET @M_PREVAUTOCUTOFF = @M_AUTOCUTOFF
    SET @M_PREVCUTOFF_FR = @M_CUTOFF_FR
    SET @M_PREVCUTOFF_TO = @M_CUTOFF_TO
  END
  IF @M_PREVSCHEDTYPE = @M_SCHEDTYPE
  BEGIN
    SET @M_PREVCROSSOVER = @M_CROSSOVER
  END
  IF @M_SHIFTID IS NULL OR @M_SCHEDULE IS NULL
  BEGIN
    SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_DATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
    SET @M_SEQNO = 1
  END
  IF @M_CROSSOVER = 1
  BEGIN
    IF @M_CUTOFF_TIME IS NOT NULL AND  @M_AUTOCUTOFF = 0
    BEGIN
      IF @M_TRXDATE > @M_CUTOFF_TIME
      BEGIN
        IF @S_ATTN_DATE_IND = 'N'
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE + 1 ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
      END
      ELSE
      IF @M_TRXDATE <= @M_CUTOFF_TIME
      BEGIN
        IF @S_ATTN_DATE_IND = 'N'
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_CUTOFF_TIME ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
      END
      ELSE
      BEGIN
        SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
      END
    END
    IF @M_PREVSCHEDTYPE IS NOT NULL
    BEGIN
      IF @M_PREV_CUTOFF_TIME IS NOT NULL AND @M_PREVAUTOCUTOFF = 0
      BEGIN
        IF @M_TRXDATE <= @M_PREV_CUTOFF_TIME AND @M_PREV_CUTOFF_TYPE = 'N'
        BEGIN
          IF @S_PREV_ATTN_DATE_IND = 'C'
          BEGIN
            SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE - 1 ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          END
          ELSE
          BEGIN
            SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          END
        END
      END
      ELSE
      BEGIN
        IF @M_AUTOCUTOFF = 0 AND @M_CROSSOVER = 1 AND @S_ATTN_DATE_IND = 'N'
        BEGIN
          IF (@M_TRXDATE >= @M_SHIFTFROM AND @M_TRXDATE <= @M_SHIFTTO) OR @M_HOUR_DATE > 12
          BEGIN
            SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTTO ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          END
        END
        IF @S_ATTN_DATE_IND = 'C'
        BEGIN
          IF @M_TRXDATE <= @M_SHIFTTO AND @M_AUTOCUTOFF = 0  --Modified by Connie on 21/11/2007
          BEGIN
            SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          END
          ELSE
          BEGIN
            IF @M_TRXDATE < @M_MID AND @M_AUTOCUTOFF = 0
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
          END
        END
      END
    END
    ELSE
    BEGIN
      IF @M_AUTOCUTOFF = 0 AND @M_CROSSOVER = 1 AND @S_ATTN_DATE_IND = 'N'
      BEGIN
        IF (@M_TRXDATE >= @M_SHIFTFROM AND @M_TRXDATE <= @M_SHIFTTO) OR @M_HOUR_DATE > 12
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTTO ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
      END
      IF @S_ATTN_DATE_IND = 'C'
      BEGIN
        IF @M_TRXDATE <= @M_SHIFTTO
        BEGIN
          SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
        END
        ELSE
        BEGIN
          IF @M_TRXDATE < @M_MID AND @M_AUTOCUTOFF = 0
          BEGIN
            SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SHIFTFROM ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
          END
        END
      END
    END
    IF @M_PREV_CUTOFF_TIME IS NULL AND @M_CUTOFF_TIME IS NULL
    BEGIN
      IF @M_NEXTSCHEDTYPE IS NOT NULL
      BEGIN
        IF @M_NEXTSCHEDTYPE <> @M_SCHEDTYPE
        BEGIN
          IF @S_ATTN_DATE_IND = 'N' AND @M_AUTOCUTOFF = 0
          BEGIN
            IF @S_NEXT_ATTN_DATE_IND = 'C'
            BEGIN
              SET @M_SCHEDULE = CONVERT(DATETIME,CONVERT(VARCHAR,@M_TRXDATE ,110) + ' ' + CONVERT(VARCHAR,'00:00:00',114),120)
            END
          END
        END
      END
    END
  END


  -- Modified: Joel@15Mar2007. 
  -- 	Added @M_SCHEDTYPE = SCHEDULE_TYPE to allow RELOAD of interface_time and update employee_attendance.schedule_type with
  --		that of the employee_schedule.schedule_type. Override whatever is in employee_attendance.
  --		
  SELECT @M_FOUND = ID,
         @M_IN1 = TIME_IN1,
         @M_IN2 = TIME_IN2,
         @M_IN3 = TIME_IN3,
         @M_IN4 = TIME_IN4,
         @M_IN5 = TIME_IN5,
         @M_OUT1 = TIME_OUT1,
         @M_OUT2 = TIME_OUT2,
         @M_OUT3 = TIME_OUT3,
         @M_OUT4 = TIME_OUT4,
         @M_OUT5 = TIME_OUT5,
         @M_MCIN1 = MACHINE_IN1,
         @M_MCIN2 = MACHINE_IN2,
         @M_MCIN3 = MACHINE_IN3,
         @M_MCIN4 = MACHINE_IN4,
         @M_MCIN5 = MACHINE_IN5,
         @M_MCOUT1 = MACHINE_OUT1,
         @M_MCOUT2 = MACHINE_OUT2,
         @M_MCOUT3 = MACHINE_OUT3,
         @M_MCOUT4 = MACHINE_OUT4,
         @M_MCOUT5 = MACHINE_OUT5,
	 @M_SCHEDTYPE_ATTEND = SCHEDULE_TYPE
  FROM   EMPLOYEE_ATTENDANCE
  WHERE  BADGE_NO = @M_BADGENO  AND EMPLOYEE_NO = @M_EMPNO AND
         CONVERT(VARCHAR,ACTUAL_DATE,110) = CONVERT(VARCHAR,@M_SCHEDULE,110) AND
         SEQ_NO = @M_SEQNO
  IF @@ROWCOUNT = 0
  	SET @M_FOUND = 0

  -- Modified: Joel@15Mar2007. 
  SELECT  @M_SCHEDTYPE = MIN(SCHEDULE_TYPE)
 	FROM    EMPLOYEE_SCHEDULE
      	WHERE   BADGE_NO = @M_BADGENO AND EMPLOYEE_NO = @M_EMPNO AND
              	CONVERT(VARCHAR,SCHEDULE_DATE,110) = CONVERT(VARCHAR,@M_TRXDATE,110)
  IF @@ROWCOUNT = 0 AND @M_FOUND > 0
      	SET @M_SCHEDTYPE = @M_SCHEDTYPE_ATTEND

  IF ( @M_SCHEDTYPE IS NULL OR @M_SCHEDTYPE = '') AND @M_FOUND = 0
      	SET @M_SCHEDTYPE = NULL
  -- End.

  IF @M_FOUND IS NULL OR @M_FOUND = 0
  BEGIN

    /* Modified: Joel@15Mar2007.
	-- Commented and moved up, outside!
    BEGIN
      -- FIND CORRESPONDING SCHEDULE FOR THIS DATE.
      SELECT  @M_SCHEDTYPE = MIN(SCHEDULE_TYPE)
      FROM    EMPLOYEE_SCHEDULE
      WHERE   EMPLOYEE_NO = @M_EMPNO  AND  BADGE_NO = @M_BADGENO
              AND CONVERT(VARCHAR,SCHEDULE_DATE,110) = CONVERT(VARCHAR,@M_SCHEDULE,110)
      IF @@ROWCOUNT = 0
         SET @M_SCHEDTYPE = null
    END
    */

    EXEC @M_SP_GETNEXTNUMBER 'EMPLOYEE_ATTENDANCE', @M_USER, @M_ATTENDANCE_ID OUTPUT
    IF @M_ATTENDANCE_ID IS NULL OR @M_ATTENDANCE_ID <= 0
    BEGIN
      RAISERROR('-20201 EMPLOYEE ATTENDANCE TABLE HAS FAILED TO GET AN ID.',16,1)
    END

    SET @M_IN1 = NULL
    SET @M_IN2 = NULL
    SET @M_IN3 = NULL
    SET @M_IN4 = NULL
    SET @M_IN5 = NULL
    SET @M_OUT1 = NULL
    SET @M_OUT2 = NULL
    SET @M_OUT3 = NULL
    SET @M_OUT4 = NULL
    SET @M_OUT5 = NULL
    SET @M_MCIN1 = NULL
    SET @M_MCIN2 = NULL
    SET @M_MCIN3 = NULL
    SET @M_MCIN4 = NULL
    SET @M_MCIN5 = NULL
    SET @M_MCOUT1 = NULL
    SET @M_MCOUT2 = NULL
    SET @M_MCOUT3 = NULL
    SET @M_MCOUT4 = NULL
    SET @M_MCOUT5 = NULL

  END
  ELSE
  BEGIN
     SET @M_ATTENDANCE_ID = @M_FOUND
  END
  IF @M_FOUND > 0
  BEGIN
    IF @M_INOUT ='O'
    BEGIN
      IF @M_OUT1 = @M_TRXDATE OR @M_OUT2 = @M_TRXDATE OR @M_OUT3 = @M_TRXDATE OR @M_OUT4 = @M_TRXDATE OR @M_OUT5 = @M_TRXDATE
      BEGIN
        RETURN
      END
    END
    ELSE
    IF @M_INOUT ='I'
    BEGIN
      IF @M_IN1 = @M_TRXDATE OR @M_IN2 = @M_TRXDATE OR @M_IN3 = @M_TRXDATE OR @M_IN4 = @M_TRXDATE OR @M_IN5 = @M_TRXDATE
      BEGIN
        RETURN
      END
    END
  END 
  IF @M_INOUT = 'E'
  BEGIN
    -- IF THIS FLAG IS 'E'ITHER, RESOLVE VIA FIRST-IN-FIRST-OUT PROCEDURE.
    IF @M_FOUND <= 0 OR @M_FOUND IS NULL
    BEGIN
      -- NO ATTENDANCE YET. ASSUME AS 'IN'
      SET @M_INOUT = 'I'
      SET @M_IN1 = @M_TIME
      SET @M_MCIN1 = @M_TIME
    END
    ELSE
    BEGIN
      IF @M_IN1 IS NULL
      BEGIN
        SET @M_INOUT = 'I'
        SET @M_IN1 = @M_TIME
        SET @M_MCIN1 = @M_TIME
      END
      ELSE
      IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN1))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
         RETURN
      ELSE
      BEGIN
        IF @M_OUT1 IS NULL
        BEGIN
          SET @M_INOUT = 'O'
          SET @M_OUT1 = @M_TIME
          SET @M_MCOUT1 = @M_TIME
        END
        ELSE
        IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT1))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
           RETURN
        ELSE
        BEGIN
          IF @M_IN2 IS NULL
          BEGIN
            SET @M_INOUT = 'I'
            SET @M_IN2 = @M_TIME
            SET @M_MCIN2 = @M_TIME
          END
          ELSE
          IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN2))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
             RETURN
          ELSE
          BEGIN
            IF @M_OUT2 IS NULL
            BEGIN
              SET @M_INOUT ='O'
              SET @M_OUT2 = @M_TIME
              SET @M_MCOUT2 = @M_TIME
            END
            ELSE
            IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT2))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
               RETURN
            ELSE
            BEGIN
              IF @M_IN3 IS NULL
              BEGIN
                SET @M_INOUT = 'I'
                SET @M_IN3 = @M_TIME
                SET @M_MCIN3 = @M_TIME
              END
              ELSE
              IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN3))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                 RETURN
              ELSE
              BEGIN
                IF @M_OUT3 IS NULL
                BEGIN
                  SET @M_INOUT ='O'
                  SET @M_OUT3 = @M_TIME
                  SET @M_MCOUT3 = @M_TIME
                END
                ELSE
                IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT3))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                   RETURN
                ELSE
                BEGIN
                  IF @M_IN4 IS NULL
                  BEGIN
                   SET @M_INOUT = 'I'
                   SET @M_IN4 = @M_TIME
                   SET @M_MCIN4 = @M_TIME
                  END
                  ELSE
                  IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN4))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                     RETURN
                  ELSE
                  BEGIN
                    IF @M_OUT4 IS NULL
                    BEGIN
                      SET @M_INOUT ='O'
                      SET @M_OUT4 = @M_TIME
                      SET @M_MCOUT4 = @M_TIME
                    END
                    ELSE
                    IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT4))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                       RETURN
                    ELSE
                    BEGIN
                      IF @M_IN5 IS NULL
                      BEGIN
                        SET @M_INOUT = 'I'
                        SET @M_IN5 = @M_TIME
                        SET @M_MCIN5 = @M_TIME
                      END
                      ELSE
                      IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN5))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                         RETURN
                      ELSE
                      BEGIN
                        SET @M_INOUT ='O'
                        SET @M_OUT5 = @M_TIME
                        SET @M_MCOUT5 = @M_TIME
                      END
                    END
                  END
                END
              END
            END
          END
        END
      END
    END -- FOR ELSE
  END -- FOR IF M_INOUT = 'E'
  ELSE
  BEGIN               
    IF @M_INOUT = 'I'
    BEGIN
      IF @M_FOUND <= 0 OR @M_FOUND IS NULL
      BEGIN
        SET @M_IN1 = @M_TIME
        SET @M_MCIN1 = @M_TIME
      END
      ELSE
      BEGIN
        IF (@M_IN1 IS NULL) AND (@M_OUT1 IS NULL OR @M_OUT1 >= @M_TIME)
        BEGIN
          SET @M_IN1 = @M_TIME
          SET @M_MCIN1 = @M_TIME
        END
        ELSE
        BEGIN
           SET @M_TIMEDIFF_IN = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN1)))
           SET @M_TIMEDIFF_OUT = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT1)))
           IF @M_TIMEDIFF_IN <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
              RETURN
           ELSE
           IF @M_TIMEDIFF_OUT <= @M_TRXWITHIN AND @M_TRXWITHIN > 0  AND (@M_OUT1 IS NOT NULL)
              RETURN
           ELSE
           IF (@M_IN2 IS NULL) AND (@M_OUT2 IS NULL OR @M_OUT2 >= @M_TIME)
           BEGIN
              SET @M_IN2 = @M_TIME
              SET @M_MCIN2 = @M_TIME
           END
           ELSE
           BEGIN
              SET @M_TIMEDIFF_IN = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN2)))
              SET @M_TIMEDIFF_OUT = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT2)))
              IF @M_TIMEDIFF_IN <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                 RETURN
              ELSE
              IF @M_TIMEDIFF_OUT <= @M_TRXWITHIN AND @M_TRXWITHIN > 0  AND (@M_OUT2 IS NOT NULL)
                 RETURN
              ELSE
              IF (@M_IN3 IS NULL) AND (@M_OUT3 IS NULL OR @M_OUT3 >= @M_TIME)
              BEGIN
                SET @M_IN3 = @M_TIME
                SET @M_MCIN3 = @M_TIME
              END
              ELSE
              BEGIN
                 SET @M_TIMEDIFF_IN = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN3)))
                 SET @M_TIMEDIFF_OUT = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT3)))
                 IF @M_TIMEDIFF_IN <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                    RETURN
                 ELSE
                 IF @M_TIMEDIFF_OUT <= @M_TRXWITHIN AND @M_TRXWITHIN > 0  AND (@M_OUT3 IS NOT NULL)
                    RETURN
                 ELSE
                 IF (@M_IN4 IS NULL) AND (@M_OUT4 IS NULL OR @M_OUT4 >= @M_TIME)
                 BEGIN
                    SET @M_IN4 = @M_TIME
                    SET @M_MCIN4 = @M_TIME
                 END
                 ELSE
                 BEGIN
                    SET @M_TIMEDIFF_IN = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_IN4)))
                    SET @M_TIMEDIFF_OUT = ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT4)))
                    IF @M_TIMEDIFF_IN <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
                       RETURN
                    ELSE
                    IF @M_TIMEDIFF_OUT <= @M_TRXWITHIN AND @M_TRXWITHIN > 0  AND (@M_OUT4 IS NOT NULL)
                       RETURN
                    ELSE
                    BEGIN
                       SET @M_IN5 = @M_TIME
                       SET @M_MCIN5 = @M_TIME
                    END
                 END
              END
           END
        END
      END
    END -- FOR IF M_INOUT = 'I'
    ELSE
    BEGIN
      IF @M_FOUND <= 0 OR @M_FOUND IS NULL
      BEGIN
        SET @M_OUT1 = @M_TIME
        IF @M_PREVAUTOCUTOFF = 1
        BEGIN
          BEGIN
            SELECT @M_PREVATTEND_ID = ID ,
                   @M_PREVIN1 = TIME_IN1 ,
                   @M_PREVIN2 = TIME_IN2 ,
                   @M_PREVIN3 = TIME_IN3,
                   @M_PREVIN4 = TIME_IN4 ,
                   @M_PREVIN5 = TIME_IN5 ,
                   @M_PREVOUT1 = TIME_OUT1 ,
                   @M_PREVOUT2 = TIME_OUT2 ,
                   @M_PREVOUT3 = TIME_OUT3 ,
                   @M_PREVOUT4 = TIME_OUT4,
                   @M_PREVOUT5 = TIME_OUT5
            FROM   EMPLOYEE_ATTENDANCE
            WHERE  BADGE_NO = @M_BADGENO  AND EMPLOYEE_NO = @M_EMPNO AND
		SEQ_NO = @M_SEQNO AND
                ACTUAL_DATE = @M_SCHEDULE - 1                   
            IF @@ROWCOUNT = 0
            BEGIN
              SET @M_PREVATTEND_ID = 0
            END
          END
          -- Resolve Previous Day ATTN_DATE_IND
          IF @M_PREVSCHEDULE_TYPE IS NOT NULL AND @M_PREVATTEND_ID > 0
          BEGIN
            SELECT @M_WORKTYPE =
                   CASE DATEPART(DW, @M_DATE )
                     WHEN 1 THEN WORK_TYPE_SUN
                     WHEN 2 THEN WORK_TYPE_MON
                     WHEN 3 THEN WORK_TYPE_TUE
                     WHEN 4 THEN WORK_TYPE_WED
                     WHEN 5 THEN WORK_TYPE_THU
                     WHEN 6 THEN WORK_TYPE_FRI
                     ELSE WORK_TYPE_SAT
                   END
            FROM   WEEKLY_SCHEDULE
            WHERE  SCHEDULE_TYPE = @M_PREVSCHEDULE_TYPE
            IF @@ROWCOUNT = 0
               SET @M_WORKTYPE = NULL
            IF @M_WORKTYPE IS NOT NULL
            BEGIN
              SELECT @S_PREV_ATTN_DATE_IND = ATTN_DATE_IND
              FROM   WORK_TYPE_SETUP
              WHERE  WORK_TYPE = @M_WORKTYPE
              IF @@ROWCOUNT = 0
                 SET @S_PREV_ATTN_DATE_IND = 'C'
            END
          END -- FOR IF @M_PREVSCHEDULE_TYPE IS NOT NULL AND @M_PREVATTEND_ID > 0
          ELSE
            SET @S_PREV_ATTN_DATE_IND = 'C'
          IF @S_PREV_ATTN_DATE_IND <> @S_ATTN_DATE_IND
             SET @S_PREV_ATTN_DATE_IND = @S_ATTN_DATE_IND
          IF @M_PREVATTEND_ID > 0
          BEGIN
            IF @M_PREVIN1 IS NOT NULL
            BEGIN
              SET @M_PREVIN = @M_PREVIN1
            END
            IF @M_PREVIN2 IS NOT NULL
            BEGIN
              SET @M_PREVIN = @M_PREVIN2
            END
            IF @M_PREVIN3 IS NOT NULL
            BEGIN
              SET @M_PREVIN = @M_PREVIN3
            END
            IF @M_PREVIN4 IS NOT NULL
            BEGIN
              SET @M_PREVIN = @M_PREVIN4
            END
            IF @M_PREVIN5 IS NOT NULL
            BEGIN
              SET @M_PREVIN = @M_PREVIN5
            END
            IF @M_PREVIN IS NOT NULL
            BEGIN
              IF @M_PREVOUT1 >= @M_PREVIN
              BEGIN
                SET @M_PREVOUT = @M_PREVOUT1
              END
              IF @M_PREVOUT2 >= @M_PREVIN
              BEGIN
                SET @M_PREVOUT = @M_PREVOUT2
              END
              IF @M_PREVOUT3 >= @M_PREVIN
              BEGIN
                SET @M_PREVOUT = @M_PREVOUT3
              END
              IF @M_PREVOUT4 >= @M_PREVIN
              BEGIN
                SET @M_PREVOUT = @M_PREVOUT4
              END
              IF @M_PREVOUT5 >= @M_PREVIN
              BEGIN
                SET @M_PREVOUT = @M_PREVOUT5
              END
              IF @M_PREVOUT IS NULL
              BEGIN
                IF @M_PREVAUTOCUTOFF = 1
                BEGIN
                  IF @S_PREV_ATTN_DATE_IND = 'C'
                  BEGIN
                    IF @M_PREVOUT1 IS NULL
                    BEGIN
                      SET @M_PREVOUT1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                      IF CONVERT(VARCHAR,@M_PREVIN,110) = CONVERT(VARCHAR, @M_PREVOUT1, 110)
                      BEGIN
                        SET @M_PREVOUT1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                      ELSE
                      IF CONVERT(VARCHAR,@M_PREVIN,114) > CONVERT(VARCHAR, @M_PREVOUT1, 114)
                      BEGIN
                        SET @M_PREVOUT1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                      ELSE
                      BEGIN
                        SET @M_PREVOUT1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1 ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                    END
                    IF @M_PREVOUT2 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT2 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                      IF CONVERT(VARCHAR,@M_PREVIN,110) = CONVERT(VARCHAR, @M_PREVOUT2, 110)
                      BEGIN
                        SET @M_PREVOUT2 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                      ELSE
                      IF CONVERT(VARCHAR,@M_PREVIN,114) > CONVERT(VARCHAR, @M_PREVOUT2, 114)
                      BEGIN
                        SET @M_PREVOUT2 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END

                      ELSE
                      BEGIN
                        SET @M_PREVOUT2 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1 ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                    END
                    IF @M_PREVOUT3 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT3 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                      IF CONVERT(VARCHAR,@M_PREVIN,110) = CONVERT(VARCHAR, @M_PREVOUT3, 110)
                      BEGIN
                        SET @M_PREVOUT3 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                      ELSE
                      IF CONVERT(VARCHAR,@M_PREVIN,114) > CONVERT(VARCHAR, @M_PREVOUT3, 114)
                      BEGIN
                        SET @M_PREVOUT3 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END

                      ELSE
                      BEGIN
                        SET @M_PREVOUT3 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1 ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                    END
                    IF @M_PREVOUT4 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                     SET @M_PREVOUT4 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                     SET @M_AUTO_OUT = 1
                     IF CONVERT(VARCHAR,@M_PREVIN,110) = CONVERT(VARCHAR, @M_PREVOUT4, 110)
                      BEGIN
                        SET @M_PREVOUT4 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END                      ELSE
                      IF CONVERT(VARCHAR,@M_PREVIN,114) > CONVERT(VARCHAR, @M_PREVOUT4, 114)
                      BEGIN
                        SET @M_PREVOUT4 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END

                      ELSE
                      BEGIN
                        SET @M_PREVOUT4 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1 ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                    END
                    IF @M_PREVOUT5 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT5 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                      IF CONVERT(VARCHAR,@M_PREVIN,110) = CONVERT(VARCHAR, @M_PREVOUT5, 110)
                      BEGIN
                        SET @M_PREVOUT5 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                      ELSE
                      IF CONVERT(VARCHAR,@M_PREVIN,114) > CONVERT(VARCHAR, @M_PREVOUT5, 114)
                      BEGIN
                        SET @M_PREVOUT5 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END

                      ELSE
                      BEGIN
                        SET @M_PREVOUT5 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1 ,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      END
                    END
                  END --IF @S_PREV_ATTN_DATE_IND = 'C'
                  ELSE
                  BEGIN
                    IF @M_PREVOUT1 IS NULL
                    BEGIN
                      SET @M_PREVOUT1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                    END
                    IF @M_PREVOUT2 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT2 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                    END
                    IF @M_PREVOUT3 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT3 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                    END
                    IF @M_PREVOUT4 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT4 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                    END
                    IF @M_PREVOUT5 IS NULL AND @M_AUTO_OUT = 0
                    BEGIN
                      SET @M_PREVOUT5 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                      SET @M_AUTO_OUT = 1
                    END
                  END
                  -- YESTERDAY GOT IN BUT NO OUT.
                  IF @S_PREV_ATTN_DATE_IND = 'C'
                  BEGIN
                    SET @M_PREVCUTOFF_TO = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_TO,114),120)
                    IF @M_PREVIN <= @M_PREVCUTOFF_TO
                    BEGIN
                      UPDATE EMPLOYEE_ATTENDANCE
                      SET TIME_OUT1 = @M_PREVOUT1,
                          TIME_OUT2 = @M_PREVOUT2,
                          TIME_OUT3 = @M_PREVOUT3,
                          TIME_OUT4 = @M_PREVOUT4,
                          TIME_OUT5 = @M_PREVOUT5
                      WHERE ID = @M_PREVATTEND_ID
                      EXEC @M_SP_UPD_EMPLOYEE_ATTENDANCE @M_PREVATTEND_ID
                    END
                  END
                  ELSE
                  BEGIN
                    UPDATE EMPLOYEE_ATTENDANCE
                    SET TIME_OUT1 = @M_PREVOUT1,
                        TIME_OUT2 = @M_PREVOUT2,
                        TIME_OUT3 = @M_PREVOUT3,
                        TIME_OUT4 = @M_PREVOUT4,
                        TIME_OUT5 = @M_PREVOUT5
                    WHERE ID = @M_PREVATTEND_ID
                    EXEC @M_SP_UPD_EMPLOYEE_ATTENDANCE @M_PREVATTEND_ID
                  END
                END --IF @M_PREVAUTOCUTOFF = 1
                IF @S_PREV_ATTN_DATE_IND = 'C' AND @M_PREVAUTOCUTOFF = 1
                BEGIN
                  SET @M_CUTOFF_TO = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE,110) + ' ' + CONVERT(VARCHAR,@M_CUTOFF_TO,114),120)
                  IF @M_PREVIN <= @M_CUTOFF_TO
                  BEGIN
                    SET @M_IN1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_FR,114),120)
                  END
                  IF @M_IN1 > @M_TRXDATE
                  BEGIN
                     SET @M_IN1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_FR,114),120)
                  END
                END
                ELSE
                IF @S_ATTN_DATE_IND = 'N' AND @M_AUTOCUTOFF = 1
                BEGIN
                  SET @M_IN1 = CONVERT(DATETIME,CONVERT(VARCHAR,@M_SCHEDULE - 1,110) + ' ' + CONVERT(VARCHAR,@M_PREVCUTOFF_FR,114),120)
                END
              END -- IF @M_PREVOUT IS NULL
            END --IF @M_PREVIN IS NOT NULL
          END --IF @M_PREVATTEND_ID > 0
        END --IF @M_AUTOCUTOFF = 1 AND @M_SHIFTS = 1
      END
      ELSE
      BEGIN
        IF (@M_OUT1 IS NULL) AND (@M_IN2 IS NULL OR @M_IN2 >= @M_TIME)
        BEGIN
          SET @M_OUT1 = @M_TIME
          SET @M_MCOUT1 = @M_TIME
        END
        ELSE
        IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT1))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
           RETURN
        ELSE
        IF (@M_OUT2 IS NULL) AND (@M_IN3 IS NULL OR @M_IN3 >= @M_TIME)
        BEGIN
           SET @M_OUT2 = @M_TIME
           SET @M_MCOUT2 = @M_TIME
        END
        ELSE
        IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT2))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
           RETURN
        ELSE
        IF (@M_OUT3 IS NULL) AND (@M_IN4 IS NULL OR @M_IN4 >= @M_TIME)
        BEGIN
          SET @M_OUT3 = @M_TIME
          SET @M_MCOUT3 = @M_TIME
        END
        ELSE
        IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT3))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
           RETURN
        ELSE
        IF (@M_OUT4 IS NULL) AND (@M_IN5 IS NULL OR @M_IN5 >= @M_TIME)
        BEGIN
          SET @M_OUT4 = @M_TIME
          SET @M_MCOUT4 = @M_TIME
        END
        ELSE
        IF ABS(CONVERT(NUMERIC(15,10),(@M_TIME - @M_OUT4))) <= @M_TRXWITHIN AND @M_TRXWITHIN > 0
           RETURN
        ELSE
        BEGIN
          SET @M_OUT5 = @M_TIME
          SET @M_MCOUT5 = @M_TIME
        END
      END
    END
  END
  IF @M_SCHEDULE IS NULL OR @M_SEQNO IS NULL
  BEGIN
    RAISERROR('-20201 ATTENDANCE DATE/SEQ# IS NULL.',16,1)
  END

  IF @M_FOUND = 0 OR @M_FOUND IS NULL
  BEGIN
    IF @M_INOUT = 'I'
    BEGIN
      INSERT INTO EMPLOYEE_ATTENDANCE
             (ID ,BADGE_NO ,EMPLOYEE_NO ,SEQ_NO ,ACTUAL_DATE ,SCHEDULE_TYPE ,
             MACHINE_IN1 ,MACHINE_IN2 ,MACHINE_IN3 ,MACHINE_IN4 ,MACHINE_IN5 ,
             TIME_IN1 ,TIME_IN2 ,TIME_IN3 ,TIME_IN4 ,TIME_IN5 ,
             CREATED_BY ,CREATED_DATE ,POSTED_STATUS,TOTAL_WORK_HOUR, APP_WORK_HOUR,
             OVERTIME1, OVERTIME2, OVERTIME3, OVERTIME4, TOTAL_OT_HOUR,OT_APP_STATUS, DOC6SS_BREAKTIME, DOC6SS_BREAK_FROM, DOC6SS_BREAK_TO)
      VALUES(
             @M_ATTENDANCE_ID ,@M_BADGENO ,@M_EMPNO ,@M_SEQNO ,@M_SCHEDULE ,@M_SCHEDTYPE,
             @M_IN1 ,@M_IN2 ,@M_IN3 ,@M_IN4 ,@M_IN5 ,@M_IN1 ,@M_IN2 ,@M_IN3,
             @M_IN4 ,@M_IN5 ,@M_USER ,@M_AUDIT, 'A',@M_DEFAULTDATE, @M_DEFAULTDATE,
             @M_DEFAULTDATE, @M_DEFAULTDATE, @M_DEFAULTDATE, @M_DEFAULTDATE, @M_DEFAULTDATE,'A',@M_TOTAL_BREAKTIME_6SS,@M_BREAKFROM_6SS, @M_BREAKTO_6SS)
    END
    ELSE
    IF @M_INOUT = 'O'
    BEGIN
      INSERT INTO EMPLOYEE_ATTENDANCE
             (ID ,BADGE_NO ,EMPLOYEE_NO ,SEQ_NO ,ACTUAL_DATE ,SCHEDULE_TYPE ,
              TIME_IN1 ,TIME_IN2 , TIME_IN3 ,TIME_IN4 ,TIME_IN5 ,
              MACHINE_OUT1 , MACHINE_OUT2 ,MACHINE_OUT3 ,MACHINE_OUT4 ,MACHINE_OUT5 ,
              TIME_OUT1 ,TIME_OUT2 , TIME_OUT3 ,TIME_OUT4 ,TIME_OUT5 ,
              CREATED_BY ,CREATED_DATE ,POSTED_STATUS,
              TOTAL_WORK_HOUR, APP_WORK_HOUR,
              OVERTIME1, OVERTIME2, OVERTIME3, OVERTIME4, TOTAL_OT_HOUR,OT_APP_STATUS, DOC6SS_BREAKTIME, DOC6SS_BREAK_FROM, DOC6SS_BREAK_TO)
      VALUES(
             @M_ATTENDANCE_ID ,@M_BADGENO ,@M_EMPNO, @M_SEQNO ,@M_SCHEDULE, @M_SCHEDTYPE,
             @M_IN1 ,@M_IN2 ,@M_IN3 ,@M_IN4 ,@M_IN5 ,
             @M_OUT1 ,@M_OUT2 ,@M_OUT3 ,@M_OUT4 ,@M_OUT5 ,
             @M_OUT1, @M_OUT2 ,@M_OUT3 ,@M_OUT4 ,@M_OUT5 ,
             @M_USER,@M_AUDIT, 'A',@M_DEFAULTDATE, @M_DEFAULTDATE,
             @M_DEFAULTDATE, @M_DEFAULTDATE, @M_DEFAULTDATE, @M_DEFAULTDATE, @M_DEFAULTDATE,'A',@M_TOTAL_BREAKTIME_6SS, @M_BREAKFROM_6SS, @M_BREAKTO_6SS)
    END
    SET @M_FOUND = @M_ATTENDANCE_ID
  END
  ELSE
  BEGIN
    UPDATE EMPLOYEE_ATTENDANCE
    SET  MACHINE_IN1 = @M_MCIN1 ,MACHINE_IN2 = @M_MCIN2 ,MACHINE_IN3 = @M_MCIN3,
         MACHINE_IN4 = @M_MCIN4 ,MACHINE_IN5 = @M_MCIN5 ,
         TIME_IN1 = @M_IN1 ,
         TIME_IN2 = @M_IN2 ,TIME_IN3 = @M_IN3 ,TIME_IN4 = @M_IN4 ,
         TIME_IN5 = @M_IN5 ,
         MACHINE_OUT1 = @M_MCOUT1 ,MACHINE_OUT2 = @M_MCOUT2,
         MACHINE_OUT3 = @M_MCOUT3 ,MACHINE_OUT4 = @M_MCOUT4 ,MACHINE_OUT5 = @M_MCOUT5,
         TIME_OUT1 = @M_OUT1 ,TIME_OUT2 = @M_OUT2 ,TIME_OUT3 = @M_OUT3,
         TIME_OUT4 = @M_OUT4 ,TIME_OUT5 = @M_OUT5,
         MODIFIED_BY = @M_USER, MODIFIED_DATE = @M_AUDIT, DOC6SS_BREAKTIME = @M_TOTAL_BREAKTIME_6SS, DOC6SS_BREAK_FROM = @M_BREAKFROM_6SS, DOC6SS_BREAK_TO = @M_BREAKTO_6SS
    WHERE  ID = @M_FOUND 
	EXEC @M_SP_UPD_EMPLOYEE_ATTENDANCE @M_FOUND
END
END



